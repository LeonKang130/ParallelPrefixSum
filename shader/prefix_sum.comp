#version 460 core
#extension GL_ARB_shader_ballot : enable
#extension GL_ARB_shader_group_vote : enable
#extension GL_NV_shader_thread_shuffle : enable
#extension GL_NV_shader_thread_group : enable

#define STATUS_X 0
#define STATUS_B 1 // block-level aggregate ready
#define STATUS_G 2 // grid-level prefix sum ready
#define STATUS_FLAG_LEN 2
#define STATUS_FLAG_MASK 3

#define THREADS_PER_WARP 32
#define WARPS_PER_BLOCK 32
#define THREADS_PER_BLOCK (THREADS_PER_WARP * WARPS_PER_BLOCK)
#define ELEMENTS_PER_THREAD 2
#define ELEMENTS_PER_WARP (ELEMENTS_PER_THREAD * THREADS_PER_WARP)
#define ELEMENTS_PER_BLOCK (ELEMENTS_PER_WARP * WARPS_PER_BLOCK)

layout(binding = 0) buffer ElementBuffer {
    int elements[];
};

layout(local_size_x = THREADS_PER_BLOCK, local_size_y = 1, local_size_z = 1) in;

shared int warp_level[WARPS_PER_BLOCK][ELEMENTS_PER_WARP];
shared int block_level[WARPS_PER_BLOCK];

void main() {
    int thread_index = int(gl_LocalInvocationID.x) % THREADS_PER_WARP;
    int warp_index = int(gl_LocalInvocationID.x) / THREADS_PER_WARP;
    int block_index = int(gl_GlobalInvocationID.x) / THREADS_PER_BLOCK;
    int current_block_offset = block_index * ELEMENTS_PER_BLOCK;
    int current_warp_offset = current_block_offset + warp_index * ELEMENTS_PER_WARP;
    // write into shared memory, reg1 and reg2 are saved for later usage
    int reg1 = elements[current_warp_offset + thread_index] >> STATUS_FLAG_LEN;
    int reg2 = elements[current_warp_offset + THREADS_PER_WARP + thread_index] >> STATUS_FLAG_LEN;
    warp_level[warp_index][thread_index] = reg1, warp_level[warp_index][THREADS_PER_WARP + thread_index] = reg2;
    // warp level prefix sum
    int offset = 0;
    #pragma unroll
    for (int d = THREADS_PER_WARP; d != 0; d >>= 1) {
        if (thread_index < d) {
            int ai = ((thread_index << 1 | 1) << offset) - 1, bi = (thread_index + 1 << offset + 1) - 1;
            warp_level[warp_index][bi] += warp_level[warp_index][ai];
        }
        offset++;
    }
    if (thread_index == 0) warp_level[warp_index][ELEMENTS_PER_WARP - 1] = 0;
    #pragma unroll
    for (int d = 1; d <= THREADS_PER_WARP; d <<= 1) {
        offset--;
        if (thread_index < d) {
            int ai = ((thread_index << 1 | 1) << offset) - 1, bi = (thread_index + 1 << offset + 1) - 1;
            int t = warp_level[warp_index][bi];
            warp_level[warp_index][bi] = t + warp_level[warp_index][ai];
            warp_level[warp_index][ai] = t;
        }
    }
    warp_level[warp_index][thread_index] += reg1;
    warp_level[warp_index][THREADS_PER_WARP + thread_index] += reg2;
    if (thread_index == 0) block_level[warp_index] = warp_level[warp_index][ELEMENTS_PER_WARP - 1];
    memoryBarrierShared();
    barrier();
    if (warp_index == 0) {
        // block level prefix sum
        #pragma unroll
        for (int d = WARPS_PER_BLOCK >> 1; d != 0; d >>= 1) {
            if (thread_index < d) {
                int ai = ((thread_index << 1 | 1) << offset) - 1, bi = (thread_index + 1 << offset + 1) - 1;
                block_level[bi] += block_level[ai];
            }
            offset++;
        }
        if (thread_index == 0) block_level[WARPS_PER_BLOCK - 1] = 0;
        #pragma unroll
        for (int d = 1; d <= WARPS_PER_BLOCK >> 1; d <<= 1) {
            offset--;
            if (thread_index < d) {
                int ai = ((thread_index << 1 | 1) << offset) - 1, bi = (thread_index + 1 << offset + 1) - 1;
                int t = block_level[bi];
                block_level[bi] = block_level[ai] + t;
                block_level[ai] = t;
            }
        }
        int reg3 = block_level[thread_index];
        elements[current_block_offset + (thread_index + 1) * ELEMENTS_PER_WARP - 1] = (warp_level[thread_index][ELEMENTS_PER_WARP - 1] + reg3) << STATUS_FLAG_LEN | STATUS_B;
        // grid level prefix sum
        int block_prefix_sum = 0;
        for (int probe_block = block_index - 1; probe_block != -1; probe_block--) {
            int status_flag = STATUS_X; uint status_mask = 0;
            int probe_block_offset = probe_block * ELEMENTS_PER_BLOCK;
            int probe_index = probe_block_offset + ELEMENTS_PER_BLOCK - THREADS_PER_WARP + thread_index;
            int reg4, reg5, reduction_offset;
            while (status_flag == STATUS_X && probe_index >= probe_block_offset) {
                reg4 = elements[probe_index];
                status_flag = reg4 & STATUS_FLAG_MASK; reg4 >>= STATUS_FLAG_LEN;
                status_mask = ballotThreadNV(status_flag != STATUS_X);
                reduction_offset = status_mask == 0 ? 0 : findMSB(status_mask);
                for (int d = (THREADS_PER_WARP - reduction_offset) >> 1; d != 0; d >>= 1) {
                    bool within_warp;
                    reg5 = shuffleDownNV(reg4, d, THREADS_PER_WARP, within_warp);
                    if (thread_index < reduction_offset + d && within_warp) reg4 = reg4 + reg5;
                }
                block_prefix_sum += readInvocationARB(reg4, reduction_offset);
                probe_index -= THREADS_PER_WARP;
                status_flag = readInvocationARB(status_flag, reduction_offset);
            }
            if (status_flag == STATUS_G) break;
        }
        #pragma unroll
        for (int current_warp = 0; current_warp < WARPS_PER_BLOCK; current_warp++) {
            int warp_prefix_sum = readInvocationARB(reg3, current_warp);
            elements[current_block_offset + current_warp * ELEMENTS_PER_WARP + thread_index] = (warp_level[current_warp][thread_index] + block_prefix_sum + warp_prefix_sum) << STATUS_FLAG_LEN | STATUS_G;
            elements[current_block_offset + current_warp * ELEMENTS_PER_WARP + THREADS_PER_WARP + thread_index] = (warp_level[current_warp][THREADS_PER_WARP + thread_index] + block_prefix_sum + warp_prefix_sum) << STATUS_FLAG_LEN | STATUS_G;
        }
    }
}
